package com.flashdynamix.motion.effects {	import flash.display.*;	import flash.filters.ConvolutionFilter;	import flash.filters.DisplacementMapFilter;	import flash.filters.DisplacementMapFilterMode;	import flash.geom.Point;	import com.flashdynamix.motion.effects.IEffect;		/**	 * @author shanem	 */	public class BumpMapEffect extends DisplacementEffect implements IEffect {		private const MTX_X : Array = [0, 0, 0,									   1, 0, -1,									   0, 0, 0];		private const MTX_Y : Array = [0, 1, 0,									   0, 0, 0,									   0, -1, 0];		private var lightBmd : BitmapData;		public function BumpMapEffect(bumpMap : BitmapData, lightMap : BitmapData, mapPoint : Point = null) {			var cv : ConvolutionFilter = new ConvolutionFilter(3, 3, [], 1, 255 / 2, true, true, 0x00000000, 0);			var outputBmd : BitmapData = new BitmapData(bumpMap.width, bumpMap.height, false, 0x00FFFFFF);						super(outputBmd, 255, 255, BitmapDataChannel.RED, BitmapDataChannel.GREEN, DisplacementMapFilterMode.CLAMP, mapPoint);						lightBmd = lightMap;			var bumpBmd : BitmapData = bumpMap;						var tempBmd : BitmapData = bumpBmd.clone();			cv.matrix = MTX_X;			tempBmd.applyFilter(tempBmd, tempBmd.rect, pt, cv);			outputBmd.copyPixels(tempBmd, tempBmd.rect, pt);						tempBmd = bumpBmd.clone();			cv.matrix = MTX_Y;			tempBmd.applyFilter(tempBmd, tempBmd.rect, pt, cv);			outputBmd.copyChannel(tempBmd, tempBmd.rect, pt, BitmapDataChannel.RED, BitmapDataChannel.GREEN);		}		override public function render(bmd : BitmapData) : void {			DisplacementMapFilter(filter).mapPoint = mapPoint;			bmd.applyFilter(lightBmd, lightBmd.rect, pt, filter);		}	}}