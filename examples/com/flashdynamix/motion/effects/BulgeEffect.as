package com.flashdynamix.motion.effects {	import flash.display.BitmapData;	import flash.display.BitmapDataChannel;	import flash.display.BlendMode;	import flash.display.GradientType;	import flash.display.Shape;	import flash.filters.BlurFilter;	import flash.filters.DisplacementMapFilter;	import flash.filters.DisplacementMapFilterMode;	import flash.geom.Matrix;	import flash.geom.Point;	import com.flashdynamix.motion.effects.DisplacementEffect;		/**	 * @author shanem	 */	public class BulgeEffect extends DisplacementEffect {		public var x : Number = 0;		public var y : Number = 0;		public var blur : Number = 40;		public var item : BitmapData;		public function BulgeEffect(item : BitmapData, scaleX : Number = 20, scaleY : Number = 20) {			super(null, scaleX, scaleY, BitmapDataChannel.RED, BitmapDataChannel.GREEN, DisplacementMapFilterMode.CLAMP, mapPoint, 0, 0);			this.item = item;			update();		}		private function update() : void {			var mtx : Matrix = new Matrix();			mtx.createGradientBox(item.width, item.height);			var red : Shape = new Shape();			var green : Shape = new Shape();						var range : Array = [1, 1];			var ratio : Array = [0x00, 0xFF];						red.graphics.beginGradientFill(GradientType.LINEAR, [0xFF0000, 0x000000], range, ratio, mtx);			red.graphics.drawRect(0, 0, item.width, item.height);							mtx.rotate(Math.PI / 2);			green.graphics.beginGradientFill(GradientType.LINEAR, [0x00FF00, 0x000000], range, ratio, mtx);			green.graphics.drawRect(0, 0, item.width, item.height);						/*			 * red.graphics.beginGradientFill(GradientType.LINEAR, [0x000000, 0xFF0000], [1, 1], [0x00, 0xFF], mtx);			red.graphics.drawRect(0, 0, _radiusX, _radiusY);								mtx.rotate(Math.PI / 2);			green.graphics.beginGradientFill(GradientType.LINEAR, [0x000000, 0x00FF00], [1, 1], [0x00, 0xFF], mtx);			green.graphics.drawRect(0, 0, _radiusX, _radiusY);			 */			var pt : Point = new Point();			mapBmd = new BitmapData(item.width, item.height, true, 0x00FFFFFF);						var maskBmd : BitmapData = item.clone();			maskBmd.applyFilter(maskBmd, maskBmd.rect, pt, new BlurFilter(blur, blur, 2));						mapBmd.draw(green);			mapBmd.draw(red, null, null, BlendMode.ADD);			mapBmd.copyChannel(maskBmd, maskBmd.rect, pt, BitmapDataChannel.ALPHA, BitmapDataChannel.ALPHA);						var finalBmd : BitmapData = new BitmapData(item.width, item.height, false, 0x00808080);			finalBmd.draw(mapBmd);			DisplacementMapFilter(filter).mapBitmap = finalBmd;		}		override public function render(bmd : BitmapData) : void {			mapPoint.x = x;			mapPoint.y = y;			super.render(bmd);		}	}}