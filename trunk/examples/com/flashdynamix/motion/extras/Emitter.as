package com.flashdynamix.motion.extras {	import flash.display.*;	import flash.events.*;	import flash.geom.ColorTransform;		import com.flashdynamix.motion.*;	import com.flashdynamix.motion.paths.Direction;		import fl.motion.easing.*;		/**	 * @author FlashDynamix	 */	public class Emitter extends Sprite {		private static const emptyArray : Array = [];		public var startDistance : Number = 0;		public var angle : *;		public var distance : *;		public var speed : Number;		public var frequency : int;		public var target : Object;		public var random : Number;		public var ease : Function = Linear.easeNone;		public var delay : Number = 0;		public var endColor : ColorTransform;		public var tween : Tweensy;		public var pool : ObjectPool;		public var running : Boolean = false;		public var holder : Sprite;		public function Emitter(Particle : Class, target : Object = null, frequency : int = 5, random : Number = 1, angle : * = "0,360", distance : * = 20, speed : Number = 1, blendMode : String = "normal") {			this.target = target;			this.frequency = frequency;			this.random = random;			this.angle = angle;			this.distance = distance;			this.speed = speed;			this.blendMode = blendMode;						holder = new Sprite();			tween = new Tweensy();			pool = new ObjectPool(Particle);						start();		}		public function pause() : void {			tween.pause();		}		public function resume() : void {			tween.resume();		}		public function start() : void {			if(running) return;			running = true;			addEvent(this, Event.ENTER_FRAME, draw);		}		public function stop() : void {			if(!running) return;			running = false;						removeEvent(this, Event.ENTER_FRAME, draw);		}		public function set scale(num : Number) : void {			this.scaleY = this.scaleX = num;		}		public function get scale() : Number {			return this.scaleY;		}		public function clone() : Emitter {			return new Emitter(pool.Item, target, frequency, random, angle, distance, speed, blendMode);		}		private function draw(e : Event) : void {			if(random < Math.random()) return;						var tl : TweensyTimeline = TweensyTimeline(Tweensy.pool.checkOut());			tl.duration = speed;			tl.ease = ease;			tl.delayStart = delay;			var items : Array = emptyArray.concat();						for(var i : int = 0;i < frequency; i++) {				var item : DisplayObject = DisplayObject(pool.checkOut());								item.blendMode = this.blendMode;				item.transform = this.transform;				if(target != null) tl.to(item, target);				if(endColor != null) tl.to(new Color(item, endColor), {position:1});				tl.to(new Direction(item, angle, distance, startDistance), {position:1});								items[i] = item;				holder.addChild(item);			}						if(tl.length > 0) {				tl.onComplete = removeChildren;				tl.onCompleteParams = items;								tween.add(tl);			}		}		private function removeChildren(...items : Array) : void {			var len : int = items.length;			var item : DisplayObject;			for(var i : int = 0;i < len; i++) {				item = items[i];								pool.checkIn(item);				holder.removeChild(item);			}		}		protected function addEvent(item : EventDispatcher, type : String, liststener : Function, priority : int = 0, useWeakReference : Boolean = true) : void {			item.addEventListener(type, liststener, false, priority, useWeakReference);		}		protected function removeEvent(item : EventDispatcher, type : String, listener : Function) : void {			item.removeEventListener(type, listener);		}		public function dispose() : void {			pool.dispose();			tween.dispose();						holder = null;			pool = null;			tween = null;			endColor = null;			target = null;		}	}}