package com.flashdynamix.motion.effects {	import flash.display.*;	import flash.geom.*;		/**	 * @author shanem	 */	dynamic public class PerlinDisplacementEffect extends DisplacementEffect implements IEffect {		public static const DIRECTION : String = "direction";		public static const ORBIT : String = "orbit";		private var offsets : Array;		private var octives : int = 2;		private var incX : Number = 0;		private var incY : Number = 0;		private var offset : Function = orbit; 		public var baseX : int = 30;		public var baseY : int = 40;		public var xSpeed : Number = 0.01;		public var ySpeed : Number = 0.01;		public var offsetX : Number = 3;		public var offsetY : Number = 3;		public var seed : int = 1;		public var fractalNoise : Boolean = false;		public var channelOptions : uint = BitmapDataChannel.RED;		public var grayScale : Boolean = false;		public var stitch : Boolean = true;		public function PerlinDisplacementEffect(width : int = 500, height : int = 500, scaleX : Number = 3, scaleY : Number = -5, octives : int = 2) {			super(new BitmapData(width, height, true, 0x00FFFFFF), scaleX, scaleY);						this.octives = octives;						offsets = [];			for (var i : int = 0;i < octives; i++) offsets.push(new Point(0, 0));		}		public function set movement(type : String) : void {			switch(type) {				case DIRECTION:					offset = direction;					break;				case ORBIT:					offset = orbit;					break;			}		}		private function orbit() : void {			incX += xSpeed;			incY += ySpeed;						for (var i : int = 0;i < octives; i++) {				var cPt : Point = offsets[i];				cPt.y += Math.sin(incY) * offsetY;				cPt.x += Math.cos(incX) * offsetX;			}		}		private function direction() : void {			for (var i : int = 0;i < octives; i++) {				var cPt : Point = offsets[i];				cPt.y += ySpeed;				cPt.x += xSpeed;			}		}		override public function render(bmd : BitmapData) : void {			offset();						mapBmd.perlinNoise(baseX, baseY, octives, seed, stitch, fractalNoise, channelOptions, grayScale, offsets);						super.render(bmd);		}	}}