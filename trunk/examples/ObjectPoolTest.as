package {	import flash.display.*;	import flash.events.*;	import flash.filters.BlurFilter;	import flash.geom.*;	import flash.text.TextField;	import flash.utils.*;		import com.flashdynamix.motion.Tweensy;	import com.flashdynamix.motion.effects.ColorEffect;	import com.flashdynamix.motion.effects.FilterEffect;	import com.flashdynamix.motion.extras.Bouncey;	import com.flashdynamix.motion.layers.BitmapLayer;	import com.lia.utils.*;		import fl.controls.ComboBox;	import fl.controls.TextInput;		/**	 * @author shanem	 */	public class ObjectPoolTest extends Sprite {		private const NOP : String = "nop";		private const SOP : String = "sop";		private const COP : String = "cop";		private const QOP : String = "qop";		public var typeDDL : ComboBox;		public var numTxtBx : TextInput;		public var minTxtBx : TextInput;		public var maxTxtBx : TextInput;		public var refreshTxtBx : TextInput;		public var timeTxtBx : TextField;		private var sop : SimpleObjectPool;		private var qop : QueuedObjectPool;		private var cop : CappedObjectPool;		private var tween : Tweensy;		private var scene : Sprite;		private var bouncey : Bouncey;		private var area : Rectangle;		private var Particle : Class;		private var current : String = NOP;		private var layer : BitmapLayer;		private var ct : ColorTransform;		private var pallette : Array = [0x00CCFF, 0x990066, 0x3366FF];		private var frame : int = 0;		private var maxSize : int = 2000;		private var minSize : int = 500;		private var maxParticles : int = 2000;		private var ti : Timer;		public function ObjectPoolTest() {						Particle = getDefinitionByName("Particle") as Class;			layer = new BitmapLayer(stage.stageWidth, stage.stageHeight);						SWFProfiler.init(stage, this);						sop = new SimpleObjectPool(create, clean);			cop = new CappedObjectPool(create, clean, minSize, maxSize);			qop = new QueuedObjectPool(create, clean, minSize, maxSize, onQueue, onTimeout);			tween = new Tweensy();			scene = new Sprite();			bouncey = new Bouncey();			ti = new Timer(2000);			area = new Rectangle(0, 0, stage.stageWidth, stage.stageHeight);			ct = new ColorTransform();						layer.add(new FilterEffect(new BlurFilter(8, 8, 2)));			layer.add(new ColorEffect(new ColorTransform(1, 1, 1, 0.99, 5, -5, 0)));			layer.draw(scene);						ti.addEventListener(TimerEvent.TIMER, onTimer);							var time : int = getTimer();						addChildAt(layer, 0);						for(var i : int = 0;i < maxParticles; i++) add();						timeTxtBx.text = "Execution Time : " + (getTimer() - time) + " Milliseconds";						ti.start();						typeDDL.addEventListener(Event.CHANGE, onChange);			numTxtBx.addEventListener(Event.CHANGE, onChange);			minTxtBx.addEventListener(Event.CHANGE, onChange);			maxTxtBx.addEventListener(Event.CHANGE, onChange);			refreshTxtBx.addEventListener(Event.CHANGE, onChange);						refreshTxtBx.restrict = maxTxtBx.restrict = minTxtBx.restrict = numTxtBx.restrict = "0-9";						numTxtBx.text = maxParticles.toString();			minTxtBx.text = minSize.toString();			maxTxtBx.text = maxSize.toString();			refreshTxtBx.text = ti.delay.toString();						maxTxtBx.enabled = minTxtBx.enabled = false;		}		private function onChange(e : Event) : void {			var time : int = getTimer();						remove();						switch(e.currentTarget) {				case typeDDL : 					current = typeDDL.selectedItem.data;										switch(current) {						case NOP :							maxTxtBx.enabled = minTxtBx.enabled = false;							break;						case SOP :							maxTxtBx.enabled = minTxtBx.enabled = false;							break;						case COP :							maxTxtBx.enabled = minTxtBx.enabled = true;							break;						case QOP :							maxTxtBx.enabled = minTxtBx.enabled = true;							break;					}										break;				case numTxtBx : 					maxParticles = Math.min(3000, Math.max(0, int(numTxtBx.text)));					break;				case minTxtBx : 					minSize = qop.minSize = cop.minSize = int(minTxtBx.text);					break;				case maxTxtBx : 					maxSize = qop.maxSize = cop.maxSize = int(maxTxtBx.text);					break;				case refreshTxtBx : 					ti.delay = Math.max(250, int(refreshTxtBx.text));					break;			}						remove();						for(var i : int = 0;i < maxParticles; i++) add();						timeTxtBx.text = "Execution Time : " + (getTimer() - time) + " Milliseconds";		}		private function onTimer(e : TimerEvent) : void {			refresh();		}		private function refresh() : void {			var time : int = getTimer();						remove();						for(var i : int = 0;i < maxParticles; i++) add();						timeTxtBx.text = "Execution Time : " + (getTimer() - time) + " Milliseconds";		}		private function remove() : void {			bouncey.empty();			var item : DisplayObject;			while(scene.numChildren) {				item = scene.getChildAt(0);				scene.removeChildAt(0);								switch(current) {					case SOP : 						sop.checkIn(item);						break;					case COP : 						cop.checkIn(item);						break;					case QOP : 						qop.checkIn(item);						break;				}			}		}		private function add() : void {			var item : DisplayObject;			switch(current) {				case NOP : 					item = create();					break;				case SOP : 					item = sop.checkOut();					break;				case COP : 					item = cop.checkOut();					break;				case QOP : 					item = qop.checkOut();					break;			}						if(item != null) setup(item);		}		private function setup(item : DisplayObject) : void {			frame++;						scene.addChild(item);						ct.color = pallette[frame % pallette.length];						item.transform.colorTransform = ct;			item.alpha = Math.random();			item.scaleX = item.scaleY = Math.random() * 0.2;			item.x = stage.stageWidth * Math.random();			item.y = stage.stageHeight * Math.random();						bouncey.add(item, area, 0, 0, -1 + Math.random() * 2, -2 + Math.random() * 4, 0.9);		}		private function create() : Sprite {			return new Particle();		}		private function clean(item : DisplayObject) : void {			//trace("clean : " + item);		}		private function onQueue(item : DisplayObject) : void {			setup(item);		}		private function onTimeout() : void {			//trace("on timeout")		}	}}