/*	 __       _____   ____    ______      ______   __  __     /\ \     /\  __`\/\  _`\ /\__  _\    /\__  _\ /\ \/\ \    \ \ \    \ \ \/\ \ \,\L\_\/_/\ \/    \/_/\ \/ \ \ `\\ \    \ \ \  __\ \ \ \ \/_\__ \  \ \ \       \ \ \  \ \ , ` \    \ \ \L\ \\ \ \_\ \/\ \L\ \ \ \ \       \_\ \__\ \ \`\ \    \ \____/ \ \_____\ `\____\ \ \_\      /\_____\\ \_\ \_\    \/___/   \/_____/\/_____/  \/_/      \/_____/ \/_/\/_/	                                                          	                                                           ______  ____    ______  ______   _____   __  __  ____    ____     ____    ______   ____    ______   /\  _  \/\  _`\ /\__  _\/\__  _\ /\  __`\/\ \/\ \/\  _`\ /\  _`\  /\  _`\ /\__  _\ /\  _`\ /\__  _\  \ \ \L\ \ \ \/\_\/_/\ \/\/_/\ \/ \ \ \/\ \ \ `\\ \ \,\L\_\ \ \/\_\\ \ \L\ \/_/\ \/ \ \ \L\ \/_/\ \/   \ \  __ \ \ \/_/_ \ \ \   \ \ \  \ \ \ \ \ \ , ` \/_\__ \\ \ \/_/_\ \ ,  /  \ \ \  \ \ ,__/  \ \ \    \ \ \/\ \ \ \L\ \ \ \ \   \_\ \__\ \ \_\ \ \ \`\ \/\ \L\ \ \ \L\ \\ \ \\ \  \_\ \__\ \ \/    \ \ \    \ \_\ \_\ \____/  \ \_\  /\_____\\ \_____\ \_\ \_\ `\____\ \____/ \ \_\ \_\/\_____\\ \_\     \ \_\    \/_/\/_/\/___/    \/_/  \/_____/ \/_____/\/_/\/_/\/_____/\/___/   \/_/\/ /\/_____/ \/_/      \/_/    Copyright (c) 2008 Lost In Actionscript - Shane McCartneyPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE. */package com.lia.utils {	import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.text.*;	import flash.ui.ContextMenu;		public class ClickToPlaySwf extends Sprite {		private var txtBx : TextField;		private var loader : Loader;		private var request : URLRequest;		private var cPer : Number = 0;		private var tPer : Number = 0;		public function ClickToPlaySwf() {			txtBx = new TextField();			loader = new Loader();			request = new URLRequest();			var loaderInfo : LoaderInfo = loader.contentLoaderInfo;			var format : TextFormat = new TextFormat("_sans", 14, 0xFFFFFF);						txtBx.defaultTextFormat = format;			txtBx.selectable = false;			txtBx.autoSize = TextFieldAutoSize.LEFT;						addEvent(loaderInfo, IOErrorEvent.IO_ERROR, onError);			addEvent(loaderInfo, Event.COMPLETE, onComplete);			addEvent(loaderInfo, ProgressEvent.PROGRESS, onProgress);			addEvent(this, Event.ADDED_TO_STAGE, added);		}		private function added(e : Event) : void {			stage.align = StageAlign.LEFT;			stage.scaleMode = StageScaleMode.NO_SCALE;			var cm : ContextMenu = new ContextMenu();			cm.hideBuiltInItems();			this.contextMenu = cm;						request.url = root.loaderInfo.parameters.url;			addChild(txtBx);			onResize();						removeEvent(this, Event.ADDED_TO_STAGE, added);			addEvent(stage, Event.RESIZE, onResize);						if(request.url) {				addEvent(this, Event.ENTER_FRAME, draw);				addChild(loader);				loader.load(request, new LoaderContext(false, ApplicationDomain.currentDomain));			} else {				onError();			}		}		private function draw(e : Event) : void {			if(tPer == 0) return;						cPer += (tPer - cPer) / 4;			txtBx.text = Math.round(cPer * 100) + "%";			onResize();		}		private function onResize(e : Event = null) : void {			txtBx.x = (stage.stageWidth - txtBx.width) / 2;			txtBx.y = (stage.stageHeight - txtBx.height) / 2;		}		private function onError(e : IOErrorEvent = null) : void {			txtBx.text = "Could not find Swf.";			onResize();		}		private function onProgress(e : ProgressEvent) : void {			tPer = e.bytesLoaded / e.bytesTotal;		}		private function onComplete(e : Event) : void {			removeEvent(this, Event.ENTER_FRAME, draw);			removeEvent(stage, Event.RESIZE, onResize);			removeChild(txtBx);		}		private function addEvent(item : EventDispatcher, type : String, listener : Function) : void {			item.addEventListener(type, listener, false, 0, true);		}		private function removeEvent(item : EventDispatcher, type : String, listener : Function) : void {			item.removeEventListener(type, listener);		}	}}