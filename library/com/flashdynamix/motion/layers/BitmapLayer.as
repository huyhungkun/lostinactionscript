package com.flashdynamix.motion.layers {	import flash.display.*;	import flash.events.*;	import flash.geom.*;	import com.flashdynamix.motion.effects.DrawEffect;	import com.flashdynamix.motion.effects.IEffect;		/**	 * @author shanem	 */	public class BitmapLayer extends Bitmap {		public var items : Array = [];		public var clearOnRender : Boolean = false;		public var running : Boolean = false;		public var mtx : Matrix;		public var cr : Rectangle;		public var pt : Point = new Point();				public function BitmapLayer(width : Number = 500, height : Number = 500, scale : Number = 1, color : uint = 0x000000, transparent : Boolean = false, smoothing : Boolean = false) {			super(new BitmapData(width / scale, height / scale, transparent, color), PixelSnapping.AUTO, smoothing);						cr = this.bitmapData.rect;			super.scaleY = super.scaleX = scale;						mtx = new Matrix();			mtx.scale(1 / scale, 1 / scale);						start();		}		public function add(effect : IEffect) : IEffect {			items.push(effect);			return effect;		}		public function remove(effect : IEffect) : Boolean {			var idx : int = items.indexOf(effect);			if(idx == -1) return false;			items.splice(idx, 1);						return true;		}		public function draw(item : IBitmapDrawable, mtx : Matrix = null, cr : Rectangle = null, ct : ColorTransform = null, bm : String = "normal", smoothing : Boolean = false) : DrawEffect {			return DrawEffect(add(new DrawEffect(item, (mtx == null) ? this.mtx : mtx, (cr == null) ? this.cr : cr, ct, bm, smoothing)));		}		public function start() : void {			if(running) return;						running = true;			addEvent(this, Event.ENTER_FRAME, render);		}		public function stop() : void {			if(!running) return;						running = false;			removeEvent(this, Event.ENTER_FRAME, render);		}		public function render(e : Event = null) : void {			bitmapData.lock();						if(clearOnRender) bitmapData.fillRect(bitmapData.rect, 0x00FFFFFF);						var len : int = items.length;			for(var i : int = 0;i < len; i++) IEffect(items[i]).render(bitmapData);						bitmapData.unlock();		}		protected function addEvent(item : EventDispatcher, type : String, listener : Function, priority : int = 0, useWeakReference : Boolean = true) : void {			item.addEventListener(type, listener, false, priority, useWeakReference);		}		protected function removeEvent(item : EventDispatcher, type : String, listener : Function) : void {			item.removeEventListener(type, listener);		}		public function dispose() : void {			stop();						mtx = null;			items = null;			pt = null;			cr = null;		}	}}