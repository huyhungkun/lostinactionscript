package com.flashdynamix.motion.layers {	import flash.display.*;	import flash.events.*;	import flash.geom.*;		/**	 * @author shanem	 */	public class BitmapLayer2 extends Shape {		public var items : Array = [];		public var renderWidth : Number;		public var renderHeight : Number;		private var running : Boolean = false;		public function BitmapLayer2(renderWidth : Number = 500, renderHeight : Number = 500) {			this.renderWidth = renderWidth;			this.renderHeight = renderHeight;						start();		}		public function start() : void {			if(running) return;						running = true;			addEvent(this, Event.ENTER_FRAME, render);		}		public function stop() : void {			if(!running) return;						running = false;			removeEvent(this, Event.ENTER_FRAME, render);		}		public function render(e : Event) : void {			this.graphics.clear();						var len : int = items.length;			var bmd : BitmapData;			var mtx : Matrix;			var pt : Point;						for(var i : int = 0;i < len; i++) {				bmd = items[i].bmd;				mtx = items[i].mtx;				pt = items[i].pt;								this.graphics.beginBitmapFill(bmd, mtx, false, true);				this.graphics.drawRect(pt.x, pt.y, bmd.width, bmd.height);			}						this.graphics.endFill();		}		public function draw(item : BitmapData, mtx : Matrix, pt : Point) : void {			items.push({bmd:item, mtx:mtx, pt:pt});		}		protected function addEvent(item : EventDispatcher, type : String, listener : Function, priority : int = 0, useWeakReference : Boolean = true) : void {			item.addEventListener(type, listener, false, priority, useWeakReference);		}		protected function removeEvent(item : EventDispatcher, type : String, listener : Function) : void {			item.removeEventListener(type, listener);		}	}}