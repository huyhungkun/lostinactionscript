package com.lia.filters {	import flash.display.*;	import flash.filters.ShaderFilter;	/**	 * This is a softer version of Overlay. 	 * Applying pure black or white does not result in pure black or white.	 */	public class BlendModeSoftlightFilter extends ShaderFilter {		[Embed("/../shaders/BlendModeSoftlight.pbj", mimeType="application/octet-stream")]		private var BlendModeSoftlightPBJ : Class;		private var _sourceBase : ShaderInput;		private var _sourceBlending : ShaderInput;		private var _alpha : ShaderParameter;		private var _multiply : ShaderParameter;		public function BlendModeSoftlightFilter() {			super(new Shader(new BlendModeSoftlightPBJ()));						var shaderData : ShaderData = shader.data;						_alpha = shaderData.alpha;			_multiply = shaderData.multiply;			_sourceBase = shaderData.src1;			_sourceBlending = shaderData.src2;		}		public function set sourceBase(bitmapData : BitmapData) : void {			_sourceBase.input = bitmapData;		}		public function set sourceBlending(bitmapData : BitmapData) : void {			_sourceBlending.input = bitmapData;		}		public function set alpha(amount : Number) : void {			_alpha.value = [amount];		}		public function get alpha() : Number {			return _alpha.value[0];		}		public function set multiply(amount : Number) : void {			_multiply.value = [amount];		}		public function get multiply() : Number {			return _multiply.value[0];		}		public function destroy() : void {			BlendModeSoftlightPBJ = null;			_sourceBase = null;			_sourceBlending = null;			_alpha = null;			_multiply = null;		}	}}